// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

`timescale 1ns/1ps

module AUTOTB_TOP;
//------------------------Parameter----------------------
localparam
    TV_IN   = "DistCalc.hdltvin.dat",
    TV_OUT  = "DistCalc.hdltvout.dat",
    ERR_LOG = "err.log";
//------------------------Local signal-------------------
reg           __aesl__clock0;
reg           reset;
reg  [31:0]   numberOfPoints;
reg           ready;
reg  [31:0]   x_dout;
reg           x_empty_n;
reg  [31:0]   y_dout;
reg           y_empty_n;
wire          x_read;
wire          y_read;
wire [31:0]   outputDist;
reg           __aesl__reset;
reg  [31:0]   __aesl__numberOfPoints;
reg           __aesl__ready;
reg  [31:0]   __aesl__x_dout;
reg           __aesl__x_empty_n;
reg  [31:0]   __aesl__y_dout;
reg           __aesl__y_empty_n;
reg           __aesl__x_read;
reg           __aesl__y_read;
reg  [31:0]   __aesl__outputDist;
integer __aesl__err;
//------------------------Instantiation------------------
DistCalc DistCalc_inst (
    .clk            ( __aesl__clock0 ),
    .reset          ( reset ),
    .numberOfPoints ( numberOfPoints ),
    .ready          ( ready ),
    .x_dout         ( x_dout ),
    .x_empty_n      ( x_empty_n ),
    .x_read         ( x_read ),
    .y_dout         ( y_dout ),
    .y_empty_n      ( y_empty_n ),
    .y_read         ( y_read ),
    .outputDist     ( outputDist )
);
//------------------------Task and function--------------
task read_token;
    input integer fp;
    output reg [271:0] token;
    reg [7:0] c;
    reg intoken;
    reg done;
begin
    token = "";
    intoken = 0;
    done = 0;
    while (!done) begin
        c = $fgetc(fp);
        if (c == 8'hff) begin   // EOF
            done = 1;
        end
        else if (c == " " || c == "\011" || c == "\012" || c == "\015") begin   // blank
            if (intoken) begin
                done = 1;
            end
        end
        else begin      // valid character
            intoken = 1;
            token = (token << 8) | c;
        end
    end
end
endtask

task rm_quoation;
    inout reg [271:0] token;
    reg [271:0] token_temp;
    integer idx;
begin
    token_temp = token >> 8;
    token = "";
    idx = 0;    while (token_temp[7:0] != 34 && token_temp[7:0] != "") begin
        token = (token_temp[7:0] << 8*idx) | token;
        token_temp = token_temp >> 8;
        idx = idx + 1;
    end
end
endtask

//------------------------Body---------------------------
// clock signals
initial begin : gen___aesl__clock0_process
    __aesl__clock0 = 0;
    # 0.001;
    while(1) begin
      __aesl__clock0 = ~__aesl__clock0;
      # 4.0;
    end
end

// read tv in
initial begin : __aesl__read_process
    integer __aesl__fp;
    integer __aesl__ret;
    reg [271:0] __aesl__token;
    // initialize
    __aesl__err = $fopen(ERR_LOG, "w");
    if (__aesl__err == 0) begin  // failed to create file
        $display("Failed to open file \"%s\"!", ERR_LOG);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    __aesl__fp = $fopen(TV_IN, "r");
    if (__aesl__fp == 0) begin  // failed to open file
        $display("Failed to open file \"%s\"!", TV_IN);
        $display("ERROR: Simulation using HLS TB failed.");
        $fdisplay(__aesl__err,"Failed to open file \"%s\"!", TV_IN);
        $finish;
    end
    read_token(__aesl__fp, __aesl__token);
    if (__aesl__token != "[") begin  // illegal format
        $display("Illegal tv format of file \"%s\"!", TV_IN);
        $display("ERROR: Simulation using HLS TB failed.");
        $fdisplay(__aesl__err,"Illegal tv format of file \"%s\"!", TV_IN);
        $finish;
    end
    read_token(__aesl__fp, __aesl__token);
    if (__aesl__token != "]") begin  // no data
        if (__aesl__token != "{") begin  // illegal format
            $display("Illegal tv format of file \"%s\"!", TV_IN);
            $display("ERROR: Simulation using HLS TB failed.");
            $fdisplay(__aesl__err,"Illegal tv format of file \"%s\"!", TV_IN);
            $finish;
        end
        read_token(__aesl__fp, __aesl__token);
        while (__aesl__token != "}") begin
            if ((__aesl__token[47 : 8] == "reset") && (__aesl__token[55 : 48] == 34) && (__aesl__token[7 : 0] == 34)) begin
                read_token(__aesl__fp, __aesl__token);
                if (__aesl__token != ":") begin  // illegal format
                    $display("Illegal tv format of file \"%s\"!", TV_IN);
                    $display("ERROR: Simulation using HLS TB failed.");
                    $fdisplay(__aesl__err,"Illegal tv format of file \"%s\"!", TV_IN);
                    $finish;
                end
                read_token(__aesl__fp, __aesl__token);
                rm_quoation(__aesl__token);
                __aesl__ret = $sscanf(__aesl__token, "%b", reset);
                if (__aesl__ret != 1) begin
                    $display("Failed to parse token!");
                    $display("ERROR: Simulation using HLS TB failed.");
                    $fdisplay(__aesl__err,"Failed to parse token!");
                    $finish;
                end
            end
            else if ((__aesl__token[119 : 8] == "numberOfPoints") && (__aesl__token[127 : 120] == 34) && (__aesl__token[7 : 0] == 34)) begin
                read_token(__aesl__fp, __aesl__token);
                if (__aesl__token != ":") begin  // illegal format
                    $display("Illegal tv format of file \"%s\"!", TV_IN);
                    $display("ERROR: Simulation using HLS TB failed.");
                    $fdisplay(__aesl__err,"Illegal tv format of file \"%s\"!", TV_IN);
                    $finish;
                end
                read_token(__aesl__fp, __aesl__token);
                rm_quoation(__aesl__token);
                __aesl__ret = $sscanf(__aesl__token, "%b", numberOfPoints);
                if (__aesl__ret != 1) begin
                    $display("Failed to parse token!");
                    $display("ERROR: Simulation using HLS TB failed.");
                    $fdisplay(__aesl__err,"Failed to parse token!");
                    $finish;
                end
            end
            else if ((__aesl__token[47 : 8] == "ready") && (__aesl__token[55 : 48] == 34) && (__aesl__token[7 : 0] == 34)) begin
                read_token(__aesl__fp, __aesl__token);
                if (__aesl__token != ":") begin  // illegal format
                    $display("Illegal tv format of file \"%s\"!", TV_IN);
                    $display("ERROR: Simulation using HLS TB failed.");
                    $fdisplay(__aesl__err,"Illegal tv format of file \"%s\"!", TV_IN);
                    $finish;
                end
                read_token(__aesl__fp, __aesl__token);
                rm_quoation(__aesl__token);
                __aesl__ret = $sscanf(__aesl__token, "%b", ready);
                if (__aesl__ret != 1) begin
                    $display("Failed to parse token!");
                    $display("ERROR: Simulation using HLS TB failed.");
                    $fdisplay(__aesl__err,"Failed to parse token!");
                    $finish;
                end
            end
            else if ((__aesl__token[55 : 8] == "x_dout") && (__aesl__token[63 : 56] == 34) && (__aesl__token[7 : 0] == 34)) begin
                read_token(__aesl__fp, __aesl__token);
                if (__aesl__token != ":") begin  // illegal format
                    $display("Illegal tv format of file \"%s\"!", TV_IN);
                    $display("ERROR: Simulation using HLS TB failed.");
                    $fdisplay(__aesl__err,"Illegal tv format of file \"%s\"!", TV_IN);
                    $finish;
                end
                read_token(__aesl__fp, __aesl__token);
                rm_quoation(__aesl__token);
                __aesl__ret = $sscanf(__aesl__token, "%b", x_dout);
                if (__aesl__ret != 1) begin
                    $display("Failed to parse token!");
                    $display("ERROR: Simulation using HLS TB failed.");
                    $fdisplay(__aesl__err,"Failed to parse token!");
                    $finish;
                end
            end
            else if ((__aesl__token[79 : 8] == "x_empty_n") && (__aesl__token[87 : 80] == 34) && (__aesl__token[7 : 0] == 34)) begin
                read_token(__aesl__fp, __aesl__token);
                if (__aesl__token != ":") begin  // illegal format
                    $display("Illegal tv format of file \"%s\"!", TV_IN);
                    $display("ERROR: Simulation using HLS TB failed.");
                    $fdisplay(__aesl__err,"Illegal tv format of file \"%s\"!", TV_IN);
                    $finish;
                end
                read_token(__aesl__fp, __aesl__token);
                rm_quoation(__aesl__token);
                __aesl__ret = $sscanf(__aesl__token, "%b", x_empty_n);
                if (__aesl__ret != 1) begin
                    $display("Failed to parse token!");
                    $display("ERROR: Simulation using HLS TB failed.");
                    $fdisplay(__aesl__err,"Failed to parse token!");
                    $finish;
                end
            end
            else if ((__aesl__token[55 : 8] == "y_dout") && (__aesl__token[63 : 56] == 34) && (__aesl__token[7 : 0] == 34)) begin
                read_token(__aesl__fp, __aesl__token);
                if (__aesl__token != ":") begin  // illegal format
                    $display("Illegal tv format of file \"%s\"!", TV_IN);
                    $display("ERROR: Simulation using HLS TB failed.");
                    $fdisplay(__aesl__err,"Illegal tv format of file \"%s\"!", TV_IN);
                    $finish;
                end
                read_token(__aesl__fp, __aesl__token);
                rm_quoation(__aesl__token);
                __aesl__ret = $sscanf(__aesl__token, "%b", y_dout);
                if (__aesl__ret != 1) begin
                    $display("Failed to parse token!");
                    $display("ERROR: Simulation using HLS TB failed.");
                    $fdisplay(__aesl__err,"Failed to parse token!");
                    $finish;
                end
            end
            else if ((__aesl__token[79 : 8] == "y_empty_n") && (__aesl__token[87 : 80] == 34) && (__aesl__token[7 : 0] == 34)) begin
                read_token(__aesl__fp, __aesl__token);
                if (__aesl__token != ":") begin  // illegal format
                    $display("Illegal tv format of file \"%s\"!", TV_IN);
                    $display("ERROR: Simulation using HLS TB failed.");
                    $fdisplay(__aesl__err,"Illegal tv format of file \"%s\"!", TV_IN);
                    $finish;
                end
                read_token(__aesl__fp, __aesl__token);
                rm_quoation(__aesl__token);
                __aesl__ret = $sscanf(__aesl__token, "%b", y_empty_n);
                if (__aesl__ret != 1) begin
                    $display("Failed to parse token!");
                    $display("ERROR: Simulation using HLS TB failed.");
                    $fdisplay(__aesl__err,"Failed to parse token!");
                    $finish;
                end
            end
            else begin  // unknown token
                $display("Unknown token \"%s\" in file \"%s\"!", __aesl__token, TV_IN);
                $display("ERROR: Simulation using HLS TB failed.");
                $fdisplay(__aesl__err,"Unknown token \"%s\" in file \"%s\"!", __aesl__token, TV_IN);
                $finish;
            end
            read_token(__aesl__fp, __aesl__token);  // skip ","
            if (__aesl__token == ",") begin
                read_token(__aesl__fp, __aesl__token);
            end
            else if (__aesl__token != "}") begin
                $display("Illegal tv format of file \"%s\"!", TV_IN);
                $display("ERROR: Simulation using HLS TB failed.");
                $fdisplay(__aesl__err,"Illegal tv format of file \"%s\"!", TV_IN);
                $finish;
            end
        end
    end
    // drive input
    __aesl__ret = $rewind(__aesl__fp);
    @(posedge __aesl__clock0);
    read_token(__aesl__fp, __aesl__token);
    if (__aesl__token != "[") begin  // illegal format
        $display("Illegal tv format of file \"%s\"!", TV_IN);
        $display("ERROR: Simulation using HLS TB failed.");
        $fdisplay(__aesl__err,"Illegal tv format of file \"%s\"!", TV_IN);
        $finish;
    end
    read_token(__aesl__fp, __aesl__token);
    while (__aesl__token != "]" && __aesl__token != "") begin
        if (__aesl__token != "{") begin  // illegal format
            $display("Illegal tv format of file \"%s\"!", TV_IN);
            $display("ERROR: Simulation using HLS TB failed.");
            $fdisplay(__aesl__err,"Illegal tv format of file \"%s\"!", TV_IN);
            $finish;
        end
        read_token(__aesl__fp, __aesl__token);
        while (__aesl__token != "}") begin
            if ((__aesl__token[47 : 8] == "reset") && (__aesl__token[55 : 48] == 34) && (__aesl__token[7 : 0] == 34)) begin
                read_token(__aesl__fp, __aesl__token);
                if (__aesl__token != ":") begin  // illegal format
                    $display("Illegal tv format of file \"%s\"!", TV_IN);
                    $display("ERROR: Simulation using HLS TB failed.");
                    $fdisplay(__aesl__err,"Illegal tv format of file \"%s\"!", TV_IN);
                    $finish;
                end
                read_token(__aesl__fp, __aesl__token);
                rm_quoation(__aesl__token);
                __aesl__ret = $sscanf(__aesl__token, "%b", __aesl__reset);
                if (__aesl__ret != 1) begin
                    $display("Failed to parse token!");
                    $display("ERROR: Simulation using HLS TB failed.");
                    $fdisplay(__aesl__err,"Failed to parse token!");
                    $finish;
                end
                reset <= __aesl__reset;
            end
            else if ((__aesl__token[119 : 8] == "numberOfPoints") && (__aesl__token[127 : 120] == 34) && (__aesl__token[7 : 0] == 34)) begin
                read_token(__aesl__fp, __aesl__token);
                if (__aesl__token != ":") begin  // illegal format
                    $display("Illegal tv format of file \"%s\"!", TV_IN);
                    $display("ERROR: Simulation using HLS TB failed.");
                    $fdisplay(__aesl__err,"Illegal tv format of file \"%s\"!", TV_IN);
                    $finish;
                end
                read_token(__aesl__fp, __aesl__token);
                rm_quoation(__aesl__token);
                __aesl__ret = $sscanf(__aesl__token, "%b", __aesl__numberOfPoints);
                if (__aesl__ret != 1) begin
                    $display("Failed to parse token!");
                    $display("ERROR: Simulation using HLS TB failed.");
                    $fdisplay(__aesl__err,"Failed to parse token!");
                    $finish;
                end
                numberOfPoints <= __aesl__numberOfPoints;
            end
            else if ((__aesl__token[47 : 8] == "ready") && (__aesl__token[55 : 48] == 34) && (__aesl__token[7 : 0] == 34)) begin
                read_token(__aesl__fp, __aesl__token);
                if (__aesl__token != ":") begin  // illegal format
                    $display("Illegal tv format of file \"%s\"!", TV_IN);
                    $display("ERROR: Simulation using HLS TB failed.");
                    $fdisplay(__aesl__err,"Illegal tv format of file \"%s\"!", TV_IN);
                    $finish;
                end
                read_token(__aesl__fp, __aesl__token);
                rm_quoation(__aesl__token);
                __aesl__ret = $sscanf(__aesl__token, "%b", __aesl__ready);
                if (__aesl__ret != 1) begin
                    $display("Failed to parse token!");
                    $display("ERROR: Simulation using HLS TB failed.");
                    $fdisplay(__aesl__err,"Failed to parse token!");
                    $finish;
                end
                ready <= __aesl__ready;
            end
            else if ((__aesl__token[55 : 8] == "x_dout") && (__aesl__token[63 : 56] == 34) && (__aesl__token[7 : 0] == 34)) begin
                read_token(__aesl__fp, __aesl__token);
                if (__aesl__token != ":") begin  // illegal format
                    $display("Illegal tv format of file \"%s\"!", TV_IN);
                    $display("ERROR: Simulation using HLS TB failed.");
                    $fdisplay(__aesl__err,"Illegal tv format of file \"%s\"!", TV_IN);
                    $finish;
                end
                read_token(__aesl__fp, __aesl__token);
                rm_quoation(__aesl__token);
                __aesl__ret = $sscanf(__aesl__token, "%b", __aesl__x_dout);
                if (__aesl__ret != 1) begin
                    $display("Failed to parse token!");
                    $display("ERROR: Simulation using HLS TB failed.");
                    $fdisplay(__aesl__err,"Failed to parse token!");
                    $finish;
                end
                x_dout <= __aesl__x_dout;
            end
            else if ((__aesl__token[79 : 8] == "x_empty_n") && (__aesl__token[87 : 80] == 34) && (__aesl__token[7 : 0] == 34)) begin
                read_token(__aesl__fp, __aesl__token);
                if (__aesl__token != ":") begin  // illegal format
                    $display("Illegal tv format of file \"%s\"!", TV_IN);
                    $display("ERROR: Simulation using HLS TB failed.");
                    $fdisplay(__aesl__err,"Illegal tv format of file \"%s\"!", TV_IN);
                    $finish;
                end
                read_token(__aesl__fp, __aesl__token);
                rm_quoation(__aesl__token);
                __aesl__ret = $sscanf(__aesl__token, "%b", __aesl__x_empty_n);
                if (__aesl__ret != 1) begin
                    $display("Failed to parse token!");
                    $display("ERROR: Simulation using HLS TB failed.");
                    $fdisplay(__aesl__err,"Failed to parse token!");
                    $finish;
                end
                x_empty_n <= __aesl__x_empty_n;
            end
            else if ((__aesl__token[55 : 8] == "y_dout") && (__aesl__token[63 : 56] == 34) && (__aesl__token[7 : 0] == 34)) begin
                read_token(__aesl__fp, __aesl__token);
                if (__aesl__token != ":") begin  // illegal format
                    $display("Illegal tv format of file \"%s\"!", TV_IN);
                    $display("ERROR: Simulation using HLS TB failed.");
                    $fdisplay(__aesl__err,"Illegal tv format of file \"%s\"!", TV_IN);
                    $finish;
                end
                read_token(__aesl__fp, __aesl__token);
                rm_quoation(__aesl__token);
                __aesl__ret = $sscanf(__aesl__token, "%b", __aesl__y_dout);
                if (__aesl__ret != 1) begin
                    $display("Failed to parse token!");
                    $display("ERROR: Simulation using HLS TB failed.");
                    $fdisplay(__aesl__err,"Failed to parse token!");
                    $finish;
                end
                y_dout <= __aesl__y_dout;
            end
            else if ((__aesl__token[79 : 8] == "y_empty_n") && (__aesl__token[87 : 80] == 34) && (__aesl__token[7 : 0] == 34)) begin
                read_token(__aesl__fp, __aesl__token);
                if (__aesl__token != ":") begin  // illegal format
                    $display("Illegal tv format of file \"%s\"!", TV_IN);
                    $display("ERROR: Simulation using HLS TB failed.");
                    $fdisplay(__aesl__err,"Illegal tv format of file \"%s\"!", TV_IN);
                    $finish;
                end
                read_token(__aesl__fp, __aesl__token);
                rm_quoation(__aesl__token);
                __aesl__ret = $sscanf(__aesl__token, "%b", __aesl__y_empty_n);
                if (__aesl__ret != 1) begin
                    $display("Failed to parse token!");
                    $display("ERROR: Simulation using HLS TB failed.");
                    $fdisplay(__aesl__err,"Failed to parse token!");
                    $finish;
                end
                y_empty_n <= __aesl__y_empty_n;
            end
            else begin  // unknown token
                $display("Unknown token \"%s\" in file \"%s\"!", __aesl__token, TV_IN);
                $display("ERROR: Simulation using HLS TB failed.");
                $fdisplay(__aesl__err,"Unknown token \"%s\" in file \"%s\"!", __aesl__token, TV_IN);
                $finish;
            end
            read_token(__aesl__fp, __aesl__token);  // skip ","
            if (__aesl__token == ",") begin
                read_token(__aesl__fp, __aesl__token);
            end
            else if (__aesl__token != "}") begin
                $display("Illegal tv format of file \"%s\"!", TV_IN);
                $display("ERROR: Simulation using HLS TB failed.");
                $fdisplay(__aesl__err,"Illegal tv format of file \"%s\"!", TV_IN);
                $finish;
            end
        end
        @(posedge __aesl__clock0);
        read_token(__aesl__fp, __aesl__token);  // skip ","
        if (__aesl__token == ",") begin
            read_token(__aesl__fp, __aesl__token);
        end
        else if (__aesl__token != "]") begin
            $display("Expected end ']' in file \"%s\"!", TV_IN);
        end
    end
    $fclose(__aesl__fp);
end

// check tv out
initial begin : __aesl__check_process
    integer __aesl__fp;
    integer __aesl__ret;
    integer __aesl__cid;
    reg __aesl__ig0;
    reg __aesl__ig1;
    reg [271:0] __aesl__token;
    integer __aesl__i;
    reg __aesl__ok;
    // check output
    __aesl__fp = $fopen(TV_OUT, "r");
    if (__aesl__fp == 0) begin  // failed to open file
        $display("Failed to open file \"%s\"!", TV_OUT);
        $display("ERROR: Simulation using HLS TB failed.");
        $fdisplay(__aesl__err,"Failed to open file \"%s\"!", TV_OUT);
        $finish;
    end
    @(posedge __aesl__clock0);
    __aesl__cid = 0;
    read_token(__aesl__fp, __aesl__token);
    if (__aesl__token != "[") begin  // illegal format
        $display("Illegal tv format of file \"%s\"!", TV_OUT);
        $display("ERROR: Simulation using HLS TB failed.");
        $fdisplay(__aesl__err, "Cycle #%0d: Failed to open file \"%s\"!", __aesl__cid, TV_OUT);
        $finish;
    end
    read_token(__aesl__fp, __aesl__token);
    while (__aesl__token != "]" && __aesl__token != "") begin
        @(posedge __aesl__clock0);
        __aesl__ig0 = (__aesl__cid < 4);
        __aesl__ig1 = (reset == 1);
        __aesl__cid = __aesl__cid + 1;
        if (__aesl__token != "{") begin  // illegal format
            $display("Illegal tv format of file \"%s\"!", TV_OUT);
            $display("ERROR: Simulation using HLS TB failed.");
            $fdisplay(__aesl__err, "Cycle #%0d: Failed to open file \"%s\"!", __aesl__cid, TV_OUT);
            $finish;
        end
        read_token(__aesl__fp, __aesl__token);
        while (__aesl__token != "}") begin
                if ((__aesl__token[55 : 8] == "x_read") && (__aesl__token[63 : 56] == 34) && (__aesl__token[7 : 0] == 34)) begin
                    read_token(__aesl__fp, __aesl__token);
                    if (__aesl__token != ":") begin  // illegal format
                        $display("Illegal tv format of file \"%s\"!", TV_OUT);
                        $display("ERROR: Simulation using HLS TB failed.");
                        $fdisplay(__aesl__err, "Cycle #%0d: Failed to open file \"%s\"!", __aesl__cid, TV_OUT);
                        $finish;
                    end
                    read_token(__aesl__fp, __aesl__token);
                    rm_quoation(__aesl__token);
                    __aesl__ret = $sscanf(__aesl__token, "%b", __aesl__x_read);
                    if (__aesl__ret != 1) begin
                        $display("Failed to parse token!");
                        $display("ERROR: Simulation using HLS TB failed.");
                        $fdisplay(__aesl__err, "Cycle #%0d: Failed to open file \"%s\"!", __aesl__cid, TV_OUT);
                        $finish;
                    end
                    if (!__aesl__ig0) begin
                        __aesl__ok = 1;
                        if (__aesl__x_read === 0 && x_read !== 0 ||
                            __aesl__x_read === 1 && x_read !== 1) begin
                            __aesl__ok = 0;
                        end
                        if (!__aesl__ok) begin
                            $fdisplay(__aesl__err, "Cycle #%0d: signal \"x_read\": %0b -- %0b (expected) unmatched.", __aesl__cid, x_read, __aesl__x_read);
                        end
                    end
                end
                else if ((__aesl__token[55 : 8] == "y_read") && (__aesl__token[63 : 56] == 34) && (__aesl__token[7 : 0] == 34)) begin
                    read_token(__aesl__fp, __aesl__token);
                    if (__aesl__token != ":") begin  // illegal format
                        $display("Illegal tv format of file \"%s\"!", TV_OUT);
                        $display("ERROR: Simulation using HLS TB failed.");
                        $fdisplay(__aesl__err, "Cycle #%0d: Failed to open file \"%s\"!", __aesl__cid, TV_OUT);
                        $finish;
                    end
                    read_token(__aesl__fp, __aesl__token);
                    rm_quoation(__aesl__token);
                    __aesl__ret = $sscanf(__aesl__token, "%b", __aesl__y_read);
                    if (__aesl__ret != 1) begin
                        $display("Failed to parse token!");
                        $display("ERROR: Simulation using HLS TB failed.");
                        $fdisplay(__aesl__err, "Cycle #%0d: Failed to open file \"%s\"!", __aesl__cid, TV_OUT);
                        $finish;
                    end
                    if (!__aesl__ig0) begin
                        __aesl__ok = 1;
                        if (__aesl__y_read === 0 && y_read !== 0 ||
                            __aesl__y_read === 1 && y_read !== 1) begin
                            __aesl__ok = 0;
                        end
                        if (!__aesl__ok) begin
                            $fdisplay(__aesl__err, "Cycle #%0d: signal \"y_read\": %0b -- %0b (expected) unmatched.", __aesl__cid, y_read, __aesl__y_read);
                        end
                    end
                end
                else if ((__aesl__token[87 : 8] == "outputDist") && (__aesl__token[95 : 88] == 34) && (__aesl__token[7 : 0] == 34)) begin
                    read_token(__aesl__fp, __aesl__token);
                    if (__aesl__token != ":") begin  // illegal format
                        $display("Illegal tv format of file \"%s\"!", TV_OUT);
                        $display("ERROR: Simulation using HLS TB failed.");
                        $fdisplay(__aesl__err, "Cycle #%0d: Failed to open file \"%s\"!", __aesl__cid, TV_OUT);
                        $finish;
                    end
                    read_token(__aesl__fp, __aesl__token);
                    rm_quoation(__aesl__token);
                    __aesl__ret = $sscanf(__aesl__token, "%b", __aesl__outputDist);
                    if (__aesl__ret != 1) begin
                        $display("Failed to parse token!");
                        $display("ERROR: Simulation using HLS TB failed.");
                        $fdisplay(__aesl__err, "Cycle #%0d: Failed to open file \"%s\"!", __aesl__cid, TV_OUT);
                        $finish;
                    end
                    if (!__aesl__ig0 && !__aesl__ig1) begin
                        __aesl__i = 0;
                        __aesl__ok = 1;
                        while (__aesl__i < 32 && __aesl__ok) begin
                            if (__aesl__outputDist[__aesl__i] === 0 && outputDist[__aesl__i] !== 0 ||
                                __aesl__outputDist[__aesl__i] === 1 && outputDist[__aesl__i] !== 1) begin
                                __aesl__ok = 0;
                            end
                            __aesl__i = __aesl__i + 1;
                        end
                        if (!__aesl__ok) begin
                            $fdisplay(__aesl__err, "Cycle #%0d: signal \"outputDist\": %0b -- %0b (expected) unmatched.", __aesl__cid, outputDist, __aesl__outputDist);
                        end
                    end
                end
                else begin  // unknown token
                    $display("Unknown token \"%s\" in file \"%s\"!", __aesl__token, TV_OUT);
                    $display("ERROR: Simulation using HLS TB failed.");
                    $fdisplay(__aesl__err, "Cycle #%0d: Failed to open file \"%s\"!", __aesl__cid, TV_OUT);
                    $finish;
                end
                read_token(__aesl__fp, __aesl__token);  // skip ","
                if (__aesl__token == ",") begin
                    read_token(__aesl__fp, __aesl__token);
                end
                else if (__aesl__token != "}") begin
                    $display("Illegal tv format of file \"%s\"!", TV_OUT);
                    $display("ERROR: Simulation using HLS TB failed.");
                    $fdisplay(__aesl__err, "Cycle #%0d: Failed to open file \"%s\"!", __aesl__cid, TV_OUT);
                    $finish;
                end
            end
            read_token(__aesl__fp, __aesl__token);  // skip ","
            if (__aesl__token == ",") begin
                read_token(__aesl__fp, __aesl__token);
            end
            else if (__aesl__token != "]") begin
                $display("Expected end ']' in file \"%s\"!", TV_OUT);
            end
        end
        $fclose(__aesl__fp);
        $fclose(__aesl__err);
        $display("Simulation done!");
        $finish;
    end

    endmodule

