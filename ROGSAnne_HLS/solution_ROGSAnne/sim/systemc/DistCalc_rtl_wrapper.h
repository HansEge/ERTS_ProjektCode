//RTL Wrapper auto-generated by Vivado HLS.
#include "DistCalc.h"


#include "AESL_TLM_FIFO_transactor.h"
SC_MODULE(DistCalc_rtl_wrapper) {

    //ESL interface.

    sc_in<bool > clk;

    sc_in<bool > reset;

    sc_out<bool > busy;

    sc_in<int > numberOfPoints;

    sc_in<bool > ready;

    sc_fifo_in<int > x;

    sc_fifo_in<int > y;

    sc_out<float > outputDist;

    //RTL interface signals.


    sc_signal<sc_logic > rtl_reset;

    sc_signal<sc_logic > rtl_busy;

    sc_signal<sc_lv<32> > rtl_numberOfPoints;

    sc_signal<sc_logic > rtl_ready;

    sc_signal<sc_lv<32> > x_dout;

    sc_signal<sc_logic > x_read;

    sc_signal<sc_logic > x_empty_n;

    sc_signal<int > x_dout_t;

    sc_signal<sc_lv<32> > y_dout;

    sc_signal<sc_logic > y_read;

    sc_signal<sc_logic > y_empty_n;

    sc_signal<int > y_dout_t;

    sc_signal<sc_lv<32> > rtl_outputDist;


DistCalc* DistCalc_inst;

    SC_CTOR(DistCalc_rtl_wrapper) { 

        DistCalc_inst = new DistCalc("DistCalc_rtl_inst");


        initInstances(DistCalc_inst);

        SC_METHOD(signal_connection);

        sensitive<<clk<<reset<<rtl_busy<<numberOfPoints<<ready<<x_dout_t<<y_dout_t<<rtl_outputDist;

    }

    ~DistCalc_rtl_wrapper() {

    delete DistCalc_inst;

    }

    void initInstances(DistCalc * DistCalc_inst) {

        //The RTL model.

        
        SC_FIFO_in_transactor<32, int >* x_inFifo_tr =  new SC_FIFO_in_transactor<32, int >("x_inFifo_tr", AESL_ResetType::active_low_sync);

        SC_FIFO_in_transactor<32, int >* y_inFifo_tr =  new SC_FIFO_in_transactor<32, int >("y_inFifo_tr", AESL_ResetType::active_low_sync);

        DistCalc_inst->clk(clk);

        DistCalc_inst->reset(rtl_reset);

        x_inFifo_tr->rst(rtl_reset);

        y_inFifo_tr->rst(rtl_reset);

        DistCalc_inst->busy(rtl_busy);

        DistCalc_inst->numberOfPoints(rtl_numberOfPoints);

        DistCalc_inst->ready(rtl_ready);

        x_inFifo_tr->FifoIn(x);

        x_inFifo_tr->clock(clk);

        x_inFifo_tr->if_empty_n(x_empty_n);

        x_inFifo_tr->if_read(x_read);

        x_inFifo_tr->if_dout(x_dout_t);

        DistCalc_inst->x_empty_n(x_empty_n);

        DistCalc_inst->x_read(x_read);

        DistCalc_inst->x_dout(x_dout);

        y_inFifo_tr->FifoIn(y);

        y_inFifo_tr->clock(clk);

        y_inFifo_tr->if_empty_n(y_empty_n);

        y_inFifo_tr->if_read(y_read);

        y_inFifo_tr->if_dout(y_dout_t);

        DistCalc_inst->y_empty_n(y_empty_n);

        DistCalc_inst->y_read(y_read);

        DistCalc_inst->y_dout(y_dout);

        DistCalc_inst->outputDist(rtl_outputDist);

    }


    void signal_connection() {


        rtl_reset.write((sc_logic)(reset.read()));

        

        bool aesl_tmp_0 = (rtl_busy.read() == SC_LOGIC_1);

        busy.write(aesl_tmp_0);


        rtl_numberOfPoints.write((sc_int<32>)(numberOfPoints.read()));

        rtl_ready.write((sc_logic)(ready.read()));

        x_dout.write((sc_int<32>)(x_dout_t.read()));

        y_dout.write((sc_int<32>)(y_dout_t.read()));

        float aesl_tmp_1 ;
*(int *)&aesl_tmp_1 = rtl_outputDist.read().to_uint64();

        outputDist.write(aesl_tmp_1);


    }

};
