-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity DistCalc is
port (
    clk : IN STD_LOGIC;
    reset : IN STD_LOGIC;
    busy : OUT STD_LOGIC := '0';
    numberOfPoints : IN STD_LOGIC_VECTOR (31 downto 0);
    ready : IN STD_LOGIC;
    x_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    x_empty_n : IN STD_LOGIC;
    x_read : OUT STD_LOGIC;
    y_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    y_empty_n : IN STD_LOGIC;
    y_read : OUT STD_LOGIC;
    outputDist : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of DistCalc is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "DistCalc,hls_ip_2017_2,{HLS_INPUT_TYPE=sc,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.354100,HLS_SYN_LAT=37,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=19,HLS_SYN_FF=7418,HLS_SYN_LUT=6230}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal grp_DistCalc_DistCalcThread_fu_70_busy : STD_LOGIC;
    signal grp_DistCalc_DistCalcThread_fu_70_busy_ap_vld : STD_LOGIC;
    signal grp_DistCalc_DistCalcThread_fu_70_x_read : STD_LOGIC;
    signal grp_DistCalc_DistCalcThread_fu_70_y_read : STD_LOGIC;
    signal grp_DistCalc_DistCalcThread_fu_70_outputDist : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_DistCalc_DistCalcThread_fu_70_outputDist_ap_vld : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";

    component DistCalc_DistCalcThread IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        busy : OUT STD_LOGIC;
        busy_ap_vld : OUT STD_LOGIC;
        numberOfPoints : IN STD_LOGIC_VECTOR (31 downto 0);
        ready : IN STD_LOGIC;
        x_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        x_empty_n : IN STD_LOGIC;
        x_read : OUT STD_LOGIC;
        y_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        y_empty_n : IN STD_LOGIC;
        y_read : OUT STD_LOGIC;
        outputDist : OUT STD_LOGIC_VECTOR (31 downto 0);
        outputDist_ap_vld : OUT STD_LOGIC );
    end component;



begin
    grp_DistCalc_DistCalcThread_fu_70 : component DistCalc_DistCalcThread
    port map (
        ap_clk => clk,
        ap_rst => reset,
        busy => grp_DistCalc_DistCalcThread_fu_70_busy,
        busy_ap_vld => grp_DistCalc_DistCalcThread_fu_70_busy_ap_vld,
        numberOfPoints => numberOfPoints,
        ready => ready,
        x_dout => x_dout,
        x_empty_n => x_empty_n,
        x_read => grp_DistCalc_DistCalcThread_fu_70_x_read,
        y_dout => y_dout,
        y_empty_n => y_empty_n,
        y_read => grp_DistCalc_DistCalcThread_fu_70_y_read,
        outputDist => grp_DistCalc_DistCalcThread_fu_70_outputDist,
        outputDist_ap_vld => grp_DistCalc_DistCalcThread_fu_70_outputDist_ap_vld);





    busy_assign_proc : process(clk)
    begin
        if (clk'event and clk =  '1') then
            if (reset = '0') then
                busy <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = grp_DistCalc_DistCalcThread_fu_70_busy_ap_vld)) then 
                    busy <= grp_DistCalc_DistCalcThread_fu_70_busy;
                end if; 
            end if;
        end if;
    end process;


    outputDist_assign_proc : process(clk)
    begin
        if (clk'event and clk =  '1') then
            if ((ap_const_logic_1 = grp_DistCalc_DistCalcThread_fu_70_outputDist_ap_vld)) then 
                outputDist <= grp_DistCalc_DistCalcThread_fu_70_outputDist;
            end if; 
        end if;
    end process;

    ap_CS_fsm <= ap_const_lv2_0;
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    x_read <= grp_DistCalc_DistCalcThread_fu_70_x_read;
    y_read <= grp_DistCalc_DistCalcThread_fu_70_y_read;
end behav;
